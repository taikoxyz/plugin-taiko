{"version":3,"sources":["../src/providers/wallet.ts","../src/actions/transfer.ts","../src/templates/index.ts","../src/services/transfer.ts","../src/actions/balance.ts","../src/services/balance.ts","../src/actions/onchainAnalytics.ts","../src/services/onchainAnalytics.ts","../src/environment.ts","../src/utils/index.ts","../src/index.ts"],"sourcesContent":["import type { IAgentRuntime, Provider, Memory, State } from \"@elizaos/core\";\nimport type {\n    Address,\n    WalletClient,\n    PublicClient,\n    Chain,\n    HttpTransport,\n    Account,\n    PrivateKeyAccount,\n    Hex,\n    ByteArray,\n} from \"viem\";\nimport {\n    createPublicClient,\n    createWalletClient,\n    erc20Abi,\n    formatUnits,\n    http,\n} from \"viem\";\nimport { getToken } from \"@lifi/sdk\";\nimport { createWeb3Name } from \"@web3-name-sdk/core\";\nimport { privateKeyToAccount } from \"viem/accounts\";\nimport * as viemChains from \"viem/chains\";\n\nimport type { SupportedChain } from \"../types\";\n\nexport class WalletProvider {\n    private currentChain: SupportedChain = \"taiko\";\n    chains: Record<string, Chain> = {\n        taiko: viemChains.taiko,\n        taikoHekla: viemChains.taikoHekla,\n    };\n    account: PrivateKeyAccount;\n\n    constructor(privateKey: `0x${string}`, chains?: Record<string, Chain>) {\n        this.setAccount(privateKey);\n        this.setChains(chains);\n\n        if (chains && Object.keys(chains).length > 0) {\n            this.setCurrentChain(Object.keys(chains)[0] as SupportedChain);\n        }\n    }\n\n    getAccount(): PrivateKeyAccount {\n        return this.account;\n    }\n\n    getAddress(): Address {\n        return this.account.address;\n    }\n\n    getCurrentChain(): Chain {\n        return this.chains[this.currentChain];\n    }\n\n    getPublicClient(\n        chainName: SupportedChain\n    ): PublicClient<HttpTransport, Chain, Account | undefined> {\n        const transport = this.createHttpTransport(chainName);\n\n        const publicClient = createPublicClient({\n            chain: this.chains[chainName],\n            transport,\n        });\n        return publicClient;\n    }\n\n    getWalletClient(chainName: SupportedChain): WalletClient {\n        const transport = this.createHttpTransport(chainName);\n\n        const walletClient = createWalletClient({\n            chain: this.chains[chainName],\n            transport,\n            account: this.account,\n        });\n\n        return walletClient;\n    }\n\n    getChainConfigs(chainName: SupportedChain): Chain {\n        const chain = viemChains[chainName];\n\n        if (!chain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        return chain;\n    }\n\n    async getBalance(): Promise<string> {\n        const client = this.getPublicClient(this.currentChain);\n        const balance = await client.getBalance({\n            address: this.account.address,\n        });\n        return formatUnits(balance, 18);\n    }\n\n    addChain(chain: Record<string, Chain>) {\n        this.setChains(chain);\n    }\n\n    switchChain(chainName: SupportedChain, customRpcUrl?: string) {\n        if (!this.chains[chainName]) {\n            const chain = WalletProvider.genChainFromName(\n                chainName,\n                customRpcUrl\n            );\n            this.addChain({ [chainName]: chain });\n        }\n        this.setCurrentChain(chainName);\n    }\n\n    async formatAddress(address: string): Promise<Address> {\n        if (!address || address.length === 0) {\n            throw new Error(\"Empty address\");\n        }\n\n        if (address.startsWith(\"0x\") && address.length === 42) {\n            return address as Address;\n        }\n\n        const resolvedAddress = await this.resolveWeb3Name(address);\n        if (resolvedAddress) {\n            return resolvedAddress as Address;\n        }\n        throw new Error(\"Invalid address\");\n    }\n\n    async resolveWeb3Name(name: string): Promise<string | null> {\n        const nameService = createWeb3Name();\n        return await nameService.getAddress(name);\n    }\n\n    async getTokenAddress(\n        chainName: SupportedChain,\n        tokenSymbol: string\n    ): Promise<string> {\n        const token = await getToken(\n            this.getChainConfigs(chainName).id,\n            tokenSymbol\n        );\n        return token.address;\n    }\n\n    async transfer(\n        chain: SupportedChain,\n        toAddress: Address,\n        amount: bigint,\n        options?: {\n            gas?: bigint;\n            gasPrice?: bigint;\n            data?: Hex;\n        }\n    ): Promise<Hex> {\n        const walletClient = this.getWalletClient(chain);\n        return await walletClient.sendTransaction({\n            account: this.account,\n            to: toAddress,\n            value: amount,\n            chain: this.getChainConfigs(chain),\n            kzg: {\n                blobToKzgCommitment: (_: ByteArray): ByteArray => {\n                    throw new Error(\"Function not implemented.\");\n                },\n                computeBlobKzgProof: (\n                    _blob: ByteArray,\n                    _commitment: ByteArray\n                ): ByteArray => {\n                    throw new Error(\"Function not implemented.\");\n                },\n            },\n            ...options,\n        });\n    }\n\n    async transferERC20(\n        chain: SupportedChain,\n        tokenAddress: Address,\n        toAddress: Address,\n        amount: bigint,\n        options?: {\n            gas?: bigint;\n            gasPrice?: bigint;\n        }\n    ): Promise<Hex> {\n        const publicClient = this.getPublicClient(chain);\n        const walletClient = this.getWalletClient(chain);\n        const { request } = await publicClient.simulateContract({\n            account: this.account,\n            address: tokenAddress as `0x${string}`,\n            abi: erc20Abi,\n            functionName: \"transfer\",\n            args: [toAddress as `0x${string}`, amount],\n            ...options,\n        });\n\n        return await walletClient.writeContract(request);\n    }\n\n    private setAccount = (pk: `0x${string}`) => {\n        this.account = privateKeyToAccount(pk);\n    };\n\n    private setChains = (chains?: Record<string, Chain>) => {\n        if (!chains) {\n            return;\n        }\n        for (const chain of Object.keys(chains)) {\n            this.chains[chain] = chains[chain];\n        }\n    };\n\n    private setCurrentChain = (chain: SupportedChain) => {\n        this.currentChain = chain;\n    };\n\n    private createHttpTransport = (chainName: SupportedChain) => {\n        const chain = this.chains[chainName];\n\n        if (chain.rpcUrls.custom) {\n            return http(chain.rpcUrls.custom.http[0]);\n        }\n        return http(chain.rpcUrls.default.http[0]);\n    };\n\n    static genChainFromName(\n        chainName: string,\n        customRpcUrl?: string | null\n    ): Chain {\n        const baseChain = viemChains[chainName];\n\n        if (!baseChain?.id) {\n            throw new Error(\"Invalid chain name\");\n        }\n\n        const viemChain: Chain = customRpcUrl\n            ? {\n                  ...baseChain,\n                  rpcUrls: {\n                      ...baseChain.rpcUrls,\n                      custom: {\n                          http: [customRpcUrl],\n                      },\n                  },\n              }\n            : baseChain;\n\n        return viemChain;\n    }\n}\n\nconst genChainsFromRuntime = (\n    runtime: IAgentRuntime\n): Record<string, Chain> => {\n    const chainNames = [\"taiko\", \"taikoHekla\"];\n    const chains = {};\n\n    for (const chainName of chainNames) {\n        const chain = WalletProvider.genChainFromName(chainName);\n        chains[chainName] = chain;\n    }\n    const mainnet_rpcurl = runtime.getSetting(\"TAIKO_PROVIDER_URL\");\n    if (mainnet_rpcurl) {\n        const chain = WalletProvider.genChainFromName(\"taiko\", mainnet_rpcurl);\n        chains[\"taiko\"] = chain;\n    }\n\n    return chains;\n};\n\nexport const initWalletProvider = (runtime: IAgentRuntime) => {\n    const privateKey = runtime.getSetting(\"TAIKO_PRIVATE_KEY\");\n    if (!privateKey) {\n        throw new Error(\"TAIKO_PRIVATE_KEY is missing\");\n    }\n\n    const chains = genChainsFromRuntime(runtime);\n\n    return new WalletProvider(privateKey as `0x${string}`, chains);\n};\n\nexport const taikoWalletProvider: Provider = {\n    async get(\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> {\n        try {\n            const walletProvider = initWalletProvider(runtime);\n            const address = walletProvider.getAddress();\n            const balance = await walletProvider.getBalance();\n            const chain = walletProvider.getCurrentChain();\n            return `Taiko chain Wallet Address: ${address}\\nBalance: ${balance} ${chain.nativeCurrency.symbol}\\nChain ID: ${chain.id}, Name: ${chain.name}`;\n        } catch (error) {\n            console.error(\"Error in Taiko chain wallet provider:\", error);\n            return null;\n        }\n    },\n};\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\n\nimport { taikoWalletProvider, initWalletProvider } from \"../providers/wallet\";\nimport { transferTemplate } from \"../templates\";\nimport type { TransferParams } from \"../types\";\nimport { TransferAction } from \"../services/transfer\";\n\nexport const transferAction = {\n    name: \"transfer\",\n    description:\n        \"Transfer Native tokens and ERC20 tokens between addresses on Taiko\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting transfer action...\");\n\n        // Validate transfer\n        if (!(message.content.source === \"direct\")) {\n            callback?.({\n                text: \"I can't do that for you.\",\n                content: { error: \"Transfer not allowed\" },\n            });\n            return false;\n        }\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        state.walletInfo = await taikoWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        // Compose transfer context\n        const transferContext = composeContext({\n            state: currentState,\n            template: transferTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: transferContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new TransferAction(walletProvider);\n        const paramOptions: TransferParams = {\n            chain: content.chain,\n            token: content.token,\n            amount: content.amount,\n            toAddress: content.toAddress,\n            data: content.data,\n        };\n\n        try {\n            const transferResp = await action.transfer(paramOptions);\n            const explorerUrl =\n                walletProvider.getCurrentChain().blockExplorers.default.url;\n            callback?.({\n                text: `Successfully transferred ${transferResp.amount} ${transferResp.token} to ${transferResp.recipient}\\n\\nLink to explorer: ${explorerUrl}/tx/${transferResp.txHash}`,\n                content: { ...transferResp },\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during transfer:\", error.message);\n            callback?.({\n                text: `Transfer failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: transferTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"TAIKO_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you transfer 1 ETH to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on ETH\",\n                    action: \"TRANSFER\",\n                    content: {\n                        chain: \"taiko\",\n                        token: \"ETH\",\n                        amount: \"1\",\n                        toAddress: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Transfer 1 token of 0x1234 to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll help you transfer 1 token of 0x1234 to 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on TAIKO\",\n                    action: \"TRANSFER\",\n                    content: {\n                        chain: \"taiko\",\n                        token: \"0x1234\",\n                        amount: \"1\",\n                        toAddress: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"TRANSFER\", \"SEND_TOKENS\", \"TOKEN_TRANSFER\", \"MOVE_TOKENS\"],\n};\n","export const transferTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested transfer:\n- chain: Must be one of [\"taiko\", \"taikoHekla\"]. Default: \"taiko\"\n- token: Token symbol (e.g., \"ETH\") or contract address (0x-prefixed). Default: \"ETH\"\n- amount: Positive number as string in ether units (e.g., \"0.1\"). Required\n- toAddress: Valid Ethereum address (0x-prefixed) or web3 domain name. Required\n- data: (Optional) Transaction data as hex string (0x-prefixed)\n\nRespond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n    \"chain\": \"taiko\" | \"taikoHekla\",\n    \"token\": string,\n    \"amount\": string,\n    \"toAddress\": string,\n    \"data\": string | null\n}\n\\`\\`\\`\n`;\n\nexport const onchainAnalyticsTemplate = `Given the recent messages below:\n\n{{recentMessages}}\n\nExtract the following information about the smart contract to analyze:\n- chain: Must be one of [\"taiko\", \"taikoHekla\"]. Default: \"taiko\"\n- contractAddress: Valid Ethereum address (0x-prefixed). Required\n\nRespond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n    \"chain\": \"taiko\" | \"taikoHekla\",\n    \"contractAddress\": string \n}\n\\`\\`\\`\n`;\n\nexport const getBalanceTemplate = `Given the recent messages and wallet information below:\n\n{{recentMessages}}\n\n{{walletInfo}}\n\nExtract the following information about the requested balance check:\n- chain: Must be one of [\"taiko\", \"taikoHekla\"]. Default: \"taiko\"\n- address: Valid Ethereum address (0x-prefixed) or web3 domain name. Default: Current wallet address\n- token: Token symbol (e.g., \"ETH\") or contract address (0x-prefixed). Default: \"ETH\"\n\nRespond with a JSON markdown block containing only the extracted values:\n\n\\`\\`\\`json\n{\n    \"chain\": \"taiko\" | \"taikoHekla\",\n    \"address\": string,\n    \"token\": string\n}\n\\`\\`\\`\n`;\n","import { WalletProvider } from \"../providers/wallet\";\n\nimport type { TransferParams, TransferResponse } from \"../types\";\nimport {\n    erc20Abi,\n    formatEther,\n    formatUnits,\n    parseEther,\n    parseUnits,\n} from \"viem\";\n\nexport class TransferAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async transfer(params: TransferParams): Promise<TransferResponse> {\n        console.log(\"Initiating a transfer transaction in Taiko:\", params);\n\n        // Validate required parameters\n        if (!params.toAddress) {\n            throw new Error(\"Recipient address is missing\");\n        }\n        if (!params.chain) {\n            throw new Error(\"Chain parameter is missing\");\n        }\n        if (params.amount && isNaN(Number(params.amount))) {\n            throw new Error(\"Invalid amount provided\");\n        }\n\n        const toAddress = await this.walletProvider.formatAddress(\n            params.toAddress\n        );\n        const fromAddress = this.walletProvider.getAddress();\n\n        this.walletProvider.switchChain(params.chain);\n\n        const nativeToken =\n            this.walletProvider.chains[params.chain].nativeCurrency.symbol;\n\n        const resp: TransferResponse = {\n            chain: params.chain,\n            txHash: \"0x\",\n            recipient: toAddress,\n            amount: \"\",\n            token: params.token === \"null\" ? null : params.token ?? nativeToken,\n        };\n\n        try {\n            if (\n                !params.token ||\n                params.token === \"null\" ||\n                params.token === nativeToken\n            ) {\n                await this.handleNativeTransfer(params, toAddress, resp);\n            } else {\n                await this.handleERC20Transfer(\n                    params,\n                    fromAddress,\n                    toAddress,\n                    resp\n                );\n            }\n\n            if (!resp.txHash || resp.txHash === \"0x\") {\n                throw new Error(\"Transaction hash is invalid\");\n            }\n\n            return resp;\n        } catch (error) {\n            throw new Error(`Transfer failed: ${error.message}`);\n        }\n    }\n\n    private async handleNativeTransfer(\n        params: TransferParams,\n        toAddress: string,\n        resp: TransferResponse\n    ): Promise<void> {\n        if (!params.amount) {\n            throw new Error(\"Amount is required for native token transfer\");\n        }\n        const value = parseEther(params.amount);\n        resp.amount = formatEther(value);\n        resp.txHash = await this.walletProvider.transfer(\n            params.chain,\n            toAddress as `0x${string}`,\n            value\n        );\n    }\n\n    private async handleERC20Transfer(\n        params: TransferParams,\n        fromAddress: string,\n        toAddress: string,\n        resp: TransferResponse\n    ): Promise<void> {\n        const tokenAddress = params.token.startsWith(\"0x\")\n            ? params.token\n            : await this.walletProvider.getTokenAddress(\n                  params.chain,\n                  params.token\n              );\n\n        const publicClient = this.walletProvider.getPublicClient(params.chain);\n        const decimals = await publicClient.readContract({\n            address: tokenAddress as `0x${string}`,\n            abi: erc20Abi,\n            functionName: \"decimals\",\n        });\n\n        const value = await this.getERC20TransferAmount(\n            publicClient,\n            tokenAddress,\n            fromAddress,\n            params.amount,\n            decimals\n        );\n\n        resp.amount = formatUnits(value, decimals);\n        resp.txHash = await this.walletProvider.transferERC20(\n            params.chain,\n            tokenAddress as `0x${string}`,\n            toAddress as `0x${string}`,\n            value\n        );\n    }\n\n    private async getERC20TransferAmount(\n        publicClient: any,\n        tokenAddress: string,\n        fromAddress: string,\n        amount: string | undefined,\n        decimals: number\n    ): Promise<bigint> {\n        if (!amount) {\n            return await publicClient.readContract({\n                address: tokenAddress as `0x${string}`,\n                abi: erc20Abi,\n                functionName: \"balanceOf\",\n                args: [fromAddress],\n            });\n        }\n        return parseUnits(amount, decimals);\n    }\n}\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\n\nimport { taikoWalletProvider, initWalletProvider } from \"../providers/wallet\";\nimport { getBalanceTemplate, transferTemplate } from \"../templates\";\nimport type { GetBalanceParams } from \"../types\";\n\nimport { BalanceAction } from \"../services/balance\";\n\nexport const balanceAction = {\n    name: \"balance\",\n    description: \"retrieve balance of a token for a given address.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting transfer action...\");\n\n        // Initialize or update state\n        let currentState = state;\n        if (!currentState) {\n            currentState = (await runtime.composeState(message)) as State;\n        } else {\n            currentState = await runtime.updateRecentMessageState(currentState);\n        }\n        state.walletInfo = await taikoWalletProvider.get(\n            runtime,\n            message,\n            currentState\n        );\n\n        const balanceContext = composeContext({\n            state: currentState,\n            template: getBalanceTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context: balanceContext,\n            modelClass: ModelClass.LARGE,\n        });\n\n        const walletProvider = initWalletProvider(runtime);\n        const action = new BalanceAction(walletProvider);\n        const paramOptions: GetBalanceParams = {\n            chain: content.chain,\n            token: content.token,\n            address: content.address,\n        };\n\n        try {\n            const resp = await action.balance(paramOptions);\n            callback?.({\n                text: `${resp.address} has ${resp.balance.amount} ${\n                    resp.balance.token\n                } in ${resp.chain === \"taikoHekla\" ? \"Taiko Hekla\" : \"Taiko\"}.`,\n                content: { ...resp },\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\"Error during fetching balance:\", error.message);\n            callback?.({\n                text: `Fetching failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: transferTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        const privateKey = runtime.getSetting(\"TAIKO_PRIVATE_KEY\");\n        return typeof privateKey === \"string\" && privateKey.startsWith(\"0x\");\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"How much USDC does siddesh.eth have in Taiko?\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll find how much USDC does siddesh.eth have in Taiko\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"taiko\",\n                        token: \"USDC\",\n                        address: \"siddesh.eth\",\n                    },\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Tell how many ETH does 0x742d35Cc6634C0532925a3b844Bc454e4438f44e have in Taiko Hekla.\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"Sure, Let me find the balance of ETH for 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on Taiko Hekla\",\n                    action: \"GET_BALANCE\",\n                    content: {\n                        chain: \"taikoHekla\",\n                        token: \"ETH\",\n                        address: \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\"GET_BALANCE\", \"BALANCE\"],\n};\n","import { erc20Abi, formatEther, formatUnits } from \"viem\";\nimport { WalletProvider } from \"../providers/wallet\";\nimport { GetBalanceParams, GetBalanceResponse } from \"../types\";\n\nexport class BalanceAction {\n    constructor(private walletProvider: WalletProvider) {}\n\n    async balance(params: GetBalanceParams): Promise<GetBalanceResponse> {\n        try {\n            if (!params.address) {\n                throw new Error(\"No address provided.\");\n            }\n\n            const { chain, token } = params;\n            const targetAddress = await this.walletProvider.formatAddress(\n                params.address\n            );\n            const nativeToken =\n                this.walletProvider.chains[chain].nativeCurrency.symbol;\n\n            this.walletProvider.switchChain(chain);\n\n            const publicClient = this.walletProvider.getPublicClient(chain);\n\n            const response: GetBalanceResponse = {\n                chain,\n                address: targetAddress,\n                balance: await this.fetchBalance({\n                    publicClient,\n                    token,\n                    nativeToken,\n                    targetAddress,\n                    chain,\n                }),\n            };\n\n            return response;\n        } catch (error) {\n            throw new Error(`Failed to fetch balance: ${error.message}`);\n        }\n    }\n\n    private async fetchBalance({\n        publicClient,\n        token,\n        nativeToken,\n        targetAddress,\n        chain,\n    }) {\n        if (!token || token === \"null\" || token === nativeToken) {\n            const nativeBalanceWei = await publicClient.getBalance({\n                address: targetAddress,\n            });\n            return {\n                token: nativeToken,\n                amount: formatEther(nativeBalanceWei),\n            };\n        }\n\n        const tokenAddress = token.startsWith(\"0x\")\n            ? token\n            : await this.walletProvider.getTokenAddress(chain, token);\n\n        const [balance, decimals] = await Promise.all([\n            publicClient.readContract({\n                address: tokenAddress as `0x${string}`,\n                abi: erc20Abi,\n                functionName: \"balanceOf\",\n                args: [targetAddress],\n            }),\n            publicClient.readContract({\n                address: tokenAddress as `0x${string}`,\n                abi: erc20Abi,\n                functionName: \"decimals\",\n            }),\n        ]);\n\n        return {\n            token,\n            amount: formatUnits(balance, decimals),\n        };\n    }\n}\n","import {\n    composeContext,\n    elizaLogger,\n    generateObjectDeprecated,\n    type HandlerCallback,\n    ModelClass,\n    type IAgentRuntime,\n    type Memory,\n    type State,\n} from \"@elizaos/core\";\n\nimport { onchainAnalyticsTemplate } from \"../templates\";\nimport { OnchainAnalyticsAction } from \"../services/onchainAnalytics\";\nimport { validateTaikoConfig } from \"../environment\";\nimport { formatAnalysisResults } from \"../utils\";\n\nexport const onchainAnalyticsAction = {\n    name: \"onchainAnalytics\",\n    description:\n        \"Gives an overview of a given address in terms onchain activity.\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: Record<string, unknown>,\n        callback?: HandlerCallback\n    ) => {\n        elizaLogger.log(\"Starting a onchain analytics research action\");\n\n        const context = composeContext({\n            state: state,\n            template: onchainAnalyticsTemplate,\n        });\n        const content = await generateObjectDeprecated({\n            runtime,\n            context,\n            modelClass: ModelClass.LARGE,\n        });\n        const config = await validateTaikoConfig(runtime);\n        const action = new OnchainAnalyticsAction(config.GOLDRUSH_API_KEY);\n        const paramOptions: any = {\n            chainName: content.chain,\n            contractAddress: content.contractAddress,\n        };\n\n        try {\n            const resp = await action.getOnchainAnalytics(paramOptions);\n            callback?.({\n                text: `Here you go,\\n ${formatAnalysisResults(resp)}`,\n                content: { ...resp },\n            });\n\n            return true;\n        } catch (error) {\n            elizaLogger.error(\n                \"Error during fetching analytics:\",\n                error.message\n            );\n            callback?.({\n                text: `Analytics Process failed: ${error.message}`,\n                content: { error: error.message },\n            });\n            return false;\n        }\n    },\n    template: onchainAnalyticsTemplate,\n    validate: async (runtime: IAgentRuntime) => {\n        return true;\n    },\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Show some contract metrics for 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll find out and show the contract metrics for 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    action: \"ONCHAIN_ANALYTICS\",\n                    content: {\n                        chain: \"taiko\",\n                        contractAddress:\n                            \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"Tell me about this contract 0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                },\n            },\n            {\n                user: \"{{agent}}\",\n                content: {\n                    text: \"I'll find the metrics for 0x742d35Cc6634C0532925a3b844Bc454e4438f44e on Taiko\",\n                    action: \"ONCHAIN_ANALYTICS\",\n                    content: {\n                        chain: \"taiko\",\n                        contractAddress:\n                            \"0x742d35Cc6634C0532925a3b844Bc454e4438f44e\",\n                    },\n                },\n            },\n        ],\n    ],\n    similes: [\n        \"ONCHAIN_ANALYTICS\",\n        \"GET_CONTRACT_ANALYTICS\",\n        \"GAS_SPENT\",\n        \"TOTAL_TRANSACTIONS\",\n    ],\n};\n","import type {\n    ContractTransactionsParams,\n    ContractTransactionsResponse,\n    TransactionAnalysis,\n} from \"../types\";\n\nexport class OnchainAnalyticsAction {\n    constructor(private goldrushAPIKey: string) {\n        if (!goldrushAPIKey) {\n            throw new Error(\"Goldrush API key is required\");\n        }\n    }\n    async getOnchainAnalytics(params: ContractTransactionsParams) {\n        if (!params.contractAddress?.startsWith(\"0x\")) {\n            throw new Error(\"Contract address must start with '0x'\");\n        }\n\n        const transactions = await this.fetchTaikoTransactions(params);\n\n        if (!transactions) {\n            throw new Error(\"Failed to fetch transaction data\");\n        }\n\n        return this.analyzeTransactions(transactions);\n    }\n\n    async fetchTaikoTransactions(\n        params: ContractTransactionsParams\n    ): Promise<ContractTransactionsResponse | null> {\n        const chainId =\n            params.chainName === \"taikoHekla\"\n                ? \"taiko-hekla-testnet\"\n                : \"taiko-mainnet\";\n\n        const GOLDRUSH_API = `https://api.covalenthq.com/v1/${chainId}/address/${params.contractAddress}/transactions_v2/?page-size=1000`;\n\n        try {\n            const response = await fetch(GOLDRUSH_API, {\n                headers: {\n                    Authorization: `Bearer ${this.goldrushAPIKey}`,\n                },\n            });\n\n            if (!response.ok) {\n                throw new Error(\n                    `API request failed: ${response.status} ${response.statusText}`\n                );\n            }\n\n            const data = await response.json();\n            return data as ContractTransactionsResponse;\n        } catch (error) {\n            console.error(\"Error fetching Taiko transactions:\", error);\n            return null;\n        }\n    }\n\n    analyzeTransactions(\n        data: ContractTransactionsResponse\n    ): TransactionAnalysis {\n        if (!data?.data?.items?.length) {\n            return this.getEmptyAnalysis();\n        }\n\n        const now = new Date();\n        const oneDayAgo = new Date();\n        oneDayAgo.setDate(now.getDate() - 1);\n        const sevenDaysAgo = new Date();\n        sevenDaysAgo.setDate(now.getDate() - 7);\n        const thirtyDaysAgo = new Date();\n        thirtyDaysAgo.setDate(now.getDate() - 30);\n\n        let totalGasSpent1d = 0;\n        let totalGasSpent7d = 0;\n        let totalGasSpent30d = 0;\n\n        let txCount1d = 0;\n        let txCount7d = 0;\n        let txCount30d = 0;\n\n        const uniqueAddresses1d = new Set<string>();\n        const uniqueAddresses7d = new Set<string>();\n        const uniqueAddresses30d = new Set<string>();\n\n        const addressInteractions1d = new Map<string, number>();\n        const addressInteractions7d = new Map<string, number>();\n        const addressInteractions30d = new Map<string, number>();\n\n        for (const tx of data.data.items) {\n            const txDate = new Date(tx.block_signed_at);\n\n            // Track 1 day data\n            if (txDate >= oneDayAgo) {\n                totalGasSpent1d += tx.gas_spent;\n                uniqueAddresses1d.add(tx.from_address);\n                uniqueAddresses1d.add(tx.to_address);\n                addressInteractions1d.set(\n                    tx.from_address,\n                    (addressInteractions1d.get(tx.from_address) || 0) + 1\n                );\n                addressInteractions1d.set(\n                    tx.to_address,\n                    (addressInteractions1d.get(tx.to_address) || 0) + 1\n                );\n                txCount1d++;\n            }\n\n            // Track 7 days data\n            if (txDate >= sevenDaysAgo) {\n                totalGasSpent7d += tx.gas_spent;\n                uniqueAddresses7d.add(tx.from_address);\n                uniqueAddresses7d.add(tx.to_address);\n                addressInteractions7d.set(\n                    tx.from_address,\n                    (addressInteractions7d.get(tx.from_address) || 0) + 1\n                );\n                addressInteractions7d.set(\n                    tx.to_address,\n                    (addressInteractions7d.get(tx.to_address) || 0) + 1\n                );\n                txCount7d++;\n            }\n\n            // Track 30 days data\n            if (txDate >= thirtyDaysAgo) {\n                totalGasSpent30d += tx.gas_spent;\n                uniqueAddresses30d.add(tx.from_address);\n                uniqueAddresses30d.add(tx.to_address);\n                addressInteractions30d.set(\n                    tx.from_address,\n                    (addressInteractions30d.get(tx.from_address) || 0) + 1\n                );\n                addressInteractions30d.set(\n                    tx.to_address,\n                    (addressInteractions30d.get(tx.to_address) || 0) + 1\n                );\n                txCount30d++;\n            }\n        }\n\n        // Function to get top addresses by interaction count\n        function getTopAddresses(\n            addressInteractions: Map<string, number>,\n            topN: number\n        ): string[] {\n            return Array.from(addressInteractions.entries())\n                .sort((a, b) => b[1] - a[1]) // Sort by interaction count (descending)\n                .slice(0, topN)\n                .map(([address]) => address);\n        }\n\n        const topAddresses1d = getTopAddresses(addressInteractions1d, 3); // Top 3 addresses for 1 day\n        const topAddresses7d = getTopAddresses(addressInteractions7d, 3); // Top 3 addresses for 7 days\n        const topAddresses30d = getTopAddresses(addressInteractions30d, 3); // Top 3 addresses for 30 days\n\n        return {\n            gasSpent: {\n                \"1d\": `${totalGasSpent1d} gwei`,\n                \"7d\": `${totalGasSpent7d} gwei`,\n                \"30d\": `${totalGasSpent30d} gwei`,\n            },\n            txCount: {\n                \"1d\": txCount1d,\n                \"7d\": txCount7d,\n                \"30d\": txCount30d,\n            },\n            uniqueAddresses: {\n                \"1d\": Array.from(uniqueAddresses1d).length,\n                \"7d\": Array.from(uniqueAddresses7d).length,\n                \"30d\": Array.from(uniqueAddresses30d).length,\n            },\n            topAddresses: {\n                \"1d\": topAddresses1d,\n                \"7d\": topAddresses7d,\n                \"30d\": topAddresses30d,\n            },\n        };\n    }\n\n    private getEmptyAnalysis(): TransactionAnalysis {\n        return {\n            gasSpent: {\n                \"1d\": \"0 gwei\",\n                \"7d\": \"0 gwei\",\n                \"30d\": \"0 gwei\",\n            },\n            txCount: {\n                \"1d\": 0,\n                \"7d\": 0,\n                \"30d\": 0,\n            },\n            uniqueAddresses: {\n                \"1d\": 0,\n                \"7d\": 0,\n                \"30d\": 0,\n            },\n            topAddresses: {\n                \"1d\": [],\n                \"7d\": [],\n                \"30d\": [],\n            },\n        };\n    }\n}\n","import { IAgentRuntime } from \"@elizaos/core\";\nimport { z } from \"zod\";\n\nexport const taikoEnvSchema = z.object({\n    GOLDRUSH_API_KEY: z.string().min(1, \"Goldrush API key is required\"),\n    TAIKO_PRIVATE_KEY: z.string().min(1, \"TAIKO private key is required\"),\n});\n\nexport type taikoConfig = z.infer<typeof taikoEnvSchema>;\n\nexport async function validateTaikoConfig(\n    runtime: IAgentRuntime\n): Promise<taikoConfig> {\n    try {\n        const config = {\n            GOLDRUSH_API_KEY: runtime.getSetting(\"GOLDRUSH_API_KEY\"),\n            TAIKO_PRIVATE_KEY: runtime.getSetting(\"TAIKO_PRIVATE_KEY\"),\n        };\n\n        return taikoEnvSchema.parse(config);\n    } catch (error) {\n        if (error instanceof z.ZodError) {\n            const errorMessages = error.errors\n                .map((err) => `${err.path.join(\".\")}: ${err.message}`)\n                .join(\"\\n\");\n            throw new Error(\n                `Taiko configuration validation failed:\\n${errorMessages}`\n            );\n        }\n        throw error;\n    }\n}\n","import { TransactionAnalysis } from \"../types\";\n\nfunction formatAnalysisResults(analysisResults: TransactionAnalysis) {\n    const { gasSpent, txCount, uniqueAddresses, topAddresses } =\n        analysisResults;\n    const formatTopAddresses = (addresses: string[]) => {\n        if (addresses.length === 0) return \"None\";\n        return addresses\n            .map((address, index) => `${index + 1}. ${address}`)\n            .join(\"\\n\");\n    };\n    return `\n      **Contract Analytics:**\n  \n      **Gas Spent:**\n        - Last 1 Day: ${gasSpent[\"1d\"]}\n        - Last 7 Days: ${gasSpent[\"7d\"]}\n        - Last 30 Days: ${gasSpent[\"30d\"]}\n  \n      **Transaction Count:**\n        - Last 1 Day: ${txCount[\"1d\"]}\n        - Last 7 Days: ${txCount[\"7d\"]}\n        - Last 30 Days: ${txCount[\"30d\"]}\n  \n      **Unique Addresses:**\n        - Last 1 Day: ${uniqueAddresses[\"1d\"]}\n        - Last 7 Days: ${uniqueAddresses[\"7d\"]}\n        - Last 30 Days: ${uniqueAddresses[\"30d\"]}\n  \n       **Top Addresses by Interactions:**\n      - 1 Day:\n${formatTopAddresses(topAddresses[\"1d\"])}\n      - 7 Days:\n${formatTopAddresses(topAddresses[\"7d\"])}\n      - 30 Days:\n${formatTopAddresses(topAddresses[\"30d\"])}\n    `;\n}\n\nexport { formatAnalysisResults };\n","import { Plugin } from \"@elizaos/core\";\nimport { taikoWalletProvider } from \"./providers/wallet\";\nimport { transferAction } from \"./actions/transfer\";\nimport { balanceAction } from \"./actions/balance\";\nimport { onchainAnalyticsAction } from \"./actions/onchainAnalytics\";\n\nexport const taikoPlugin: Plugin = {\n    name: \"taiko\",\n    description: \"Taiko plugin for Eliza\",\n    actions: [transferAction, onchainAnalyticsAction, balanceAction],\n    evaluators: [],\n    providers: [taikoWalletProvider],\n};\nexport default taikoPlugin;\n"],"mappings":"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","names":["erc20Abi","formatUnits","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","erc20Abi","formatEther","formatUnits","elizaLogger","composeContext","generateObjectDeprecated","ModelClass","composeContext","elizaLogger","generateObjectDeprecated","ModelClass","elizaLogger","composeContext","generateObjectDeprecated","ModelClass"]}